@page "/ThankYou"

@if (Saved)
{
    if (Error)
    {
        <h1 class="temporary-header">SORRY</h1>
        <p>An error has occurred while trying to save your details.</p>
        <p>Please press the button below to retry:</p>
        <button type="submit" class="btn retry-button" @onclick="HandleRetry">Retry</button>
    }
    else
    {
        <PageTitle Title="THANK YOU" Position="7" />

        <p>
            Your valuable responses will be used to produce a report of UK Executive's attitude towards custom Software Development.
        </p>
        <p>
            For <strong>SurveyCircle</strong> users (www.surveycircle.com): The Survey Code is: <strong>P62J-K62F-QK5X-5ZQX</strong>
        </p>
        <hr />

        <p>In the meanwhile;</p>

        <div class="podcast-link">
            <h2>Listen to the podcast</h2>
            <div class="text-center">
                <a href="https://red-folder.com/podcasts">
                    <img src="/images/PodcastLogo-250x250.png" alt="Podcast Logo" />
                </a>
            </div>
        </div>

        <div class="newsletter-signup">
            <h2>Sign up to the newsletter</h2>
            <form class="form-inline" action="https://tinyletter.com/red-folder" method="post" target="popupwindow" onsubmit="window.open('https://tinyletter.com/red-folder', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true">
                <input type="hidden" value="1" name="embed" />

                <input class="form-control" type="text" name="email" id="tlemail" placeholder="Your email address" />

                <button type="submit" class="btn" value="Subscribe">Subscribe to the newsletter</button>
            </form>
        </div>
    }
}
else
{
    <LoadingSpinner Title="SAVING ..."></LoadingSpinner>
}

@code
{
    [Inject]
    private Models.SurveyResponse Model { get; set; }
    [Inject]
    private Services.IEventLoggingService EventLoggingService { get; set; }
    [Inject]
    private Services.IPersistanceManager PersistanceManager { get; set; }

    private bool Saved { get; set; }
    private bool Error { get; set; }

    protected override void OnInitialized()
    {
        EventLoggingService.TrackEvent("Loaded thank you page");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SaveData();
        }
    }

    protected void HandleRetry(EventArgs eventArgs)
    {
        Saved = false;
        Error = false;
        StateHasChanged();

        SaveData();
    }

    private void SaveData()
    {
        EventLoggingService.TrackEvent("Save started");

        var task = PersistanceManager.Persist(Model);
        task.ContinueWith(async x =>
        {
            Error = !x.Result;
            Saved = true;
            await InvokeAsync(StateHasChanged);

            if (Error)
            {
                EventLoggingService.TrackEvent("Save failed");
            }
            else
            {
                EventLoggingService.TrackEvent("Save completed");
            }
        });

        Task.Run(() => task);
    }
}